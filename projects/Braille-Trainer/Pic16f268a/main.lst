CCS PCM C Compiler, Version 4.114, 93460303               03-feb-16 13:55

               Filename: C:\Users\Cristian\Documents\Ingeniería\Proyectps\Para Invidentes\Pic16f268a\main.lst

               ROM used: 602 words (29%)
                         Largest free fragment is 1446
               RAM used: 62 (28%) at main() level
                         66 (29%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   168
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.4
001B:  GOTO   01E
001C:  BTFSC  0B.1
001D:  GOTO   0A7
001E:  MOVLW  8C
001F:  MOVWF  04
0020:  BTFSS  00.5
0021:  GOTO   024
0022:  BTFSC  0C.5
0023:  GOTO   0C7
0024:  MOVF   22,W
0025:  MOVWF  04
0026:  MOVF   23,W
0027:  MOVWF  77
0028:  MOVF   24,W
0029:  MOVWF  78
002A:  MOVF   25,W
002B:  MOVWF  79
002C:  MOVF   26,W
002D:  MOVWF  7A
002E:  MOVF   27,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
.................... #include <main.h> 
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES PUT                      //Power Up Timer 
.................... //#FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOMCLR                   //Master Clear pin used for I/O 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOPROTECT                //Code not protected from reading 
....................  
.................... #use delay(int=4000000) 
*
00DD:  MOVLW  58
00DE:  MOVWF  04
00DF:  BCF    03.7
00E0:  MOVF   00,W
00E1:  BTFSC  03.2
00E2:  GOTO   0F1
00E3:  MOVLW  01
00E4:  MOVWF  78
00E5:  CLRF   77
00E6:  DECFSZ 77,F
00E7:  GOTO   0E6
00E8:  DECFSZ 78,F
00E9:  GOTO   0E5
00EA:  MOVLW  4A
00EB:  MOVWF  77
00EC:  DECFSZ 77,F
00ED:  GOTO   0EC
00EE:  GOTO   0EF
00EF:  DECFSZ 00,F
00F0:  GOTO   0E3
00F1:  RETURN
00F2:  MOVLW  12
00F3:  SUBWF  5A,F
00F4:  BTFSS  03.0
00F5:  GOTO   105
00F6:  MOVLW  5A
00F7:  MOVWF  04
00F8:  BCF    03.7
00F9:  MOVLW  FC
00FA:  ANDWF  00,F
00FB:  BCF    03.0
00FC:  RRF    00,F
00FD:  RRF    00,F
00FE:  MOVF   00,W
00FF:  BTFSC  03.2
0100:  GOTO   105
0101:  GOTO   103
0102:  NOP
0103:  DECFSZ 00,F
0104:  GOTO   102
0105:  RETURN
.................... //#use delay(clock=10000000) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B2,rcv=PIN_B1,bits=8)//stream=PORT1) 
....................  
....................  
....................  
.................... int16 delay=0,  min, max, tiempo; 
.................... int8 bit=0, pal=0; 
.................... unsigned char dato=0, salida=0, palabra[30]; 
.................... int1 hi=1, hi2=1, acento=0; 
....................  
.................... unsigned char const sinshift[48][2] = { 
.................... 0x0d,0xCC, 0x15,0x4F, 0x1a,0xC5, 0x1b,0x0E, 0x1c,0x01, 0x1d,0xCA, 
.................... 0x21,0x09, 0x22,0x8D, 0x23,0x49, 0x24,0x41, 0x29,0x00, 0x2a,0x87,  
.................... 0x2b,0x0B, 0x2c,0x4E, 0x2d,0x47, 0x31,0x4D, 0x32,0x03, 0x33,0x43,  
.................... 0x34,0x4B, 0x35,0xCD, 0x39,0x02, 0x3a,0x0D, 0x3b,0x4A, 0x3c,0x85,  
.................... 0x41,0x02, 0x42,0x05, 0x43,0x0A, 0x44,0x45, 0x49,0x04, 0x4a,0x84,  
.................... 0x4b,0x07, 0x4c,0xCB, 0x4d,0x0F, 0x55,0x46, 0x5b,0x46, 0x61,0x40,  
.................... 0x71,0x04, 0x79,0x46, 0x7b,0x84, 0x7c,0x44, 0x58,0x88, 0x76,0xCF, 
.................... 0x52,0x00, 0x05,0xC7, 0x06,0x8E, 0x04,0x0C, 0x0C,0x8C, 0x03,0xCE    
.................... }; 
....................  
.................... unsigned char const acentuadas[5][2] = { 
.................... 0x1C,0xC7,0x24,0x8E,0x43,0x0C,0x44,0x8C,0x3C,0xCE 
.................... }; 
....................  
....................  
.................... #int_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................  
....................    if (hi) 
*
00A7:  BTFSS  52.0
00A8:  GOTO   0C4
....................    { 
....................    if((bit>0)&&(bit<9)) 
00A9:  MOVF   30,F
00AA:  BTFSC  03.2
00AB:  GOTO   0B7
00AC:  MOVF   30,W
00AD:  SUBLW  08
00AE:  BTFSS  03.0
00AF:  GOTO   0B7
....................    { 
....................     dato = (dato >> 1); 
00B0:  BCF    03.0
00B1:  RRF    32,F
....................      
....................       if(input(PIN_B4)) 
00B2:  BSF    03.5
00B3:  BSF    06.4
00B4:  BCF    03.5
00B5:  BTFSC  06.4
....................          dato = dato | 0x80;       
00B6:  BSF    32.7
....................    } 
....................                
....................        
....................    if (bit++==32) 
00B7:  MOVF   30,W
00B8:  INCF   30,F
00B9:  SUBLW  20
00BA:  BTFSS  03.2
00BB:  GOTO   0C4
....................    {        
....................       if (dato==0x52) 
00BC:  MOVF   32,W
00BD:  SUBLW  52
00BE:  BTFSS  03.2
00BF:  GOTO   0C2
....................       { 
....................          acento=true;         
00C0:  BSF    52.2
....................       } 
....................       else 
00C1:  GOTO   0C3
....................       {       
....................          hi=false;       
00C2:  BCF    52.0
....................       } 
....................       bit=0; 
00C3:  CLRF   30
....................    }    
....................    } 
.................... } 
....................  
00C4:  BCF    0B.1
00C5:  BCF    0A.3
00C6:  GOTO   024
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
....................    palabra[pal]=getch(); 
00C7:  MOVLW  34
00C8:  ADDWF  31,W
00C9:  MOVWF  04
00CA:  BCF    03.7
00CB:  BTFSS  0C.5
00CC:  GOTO   0CB
00CD:  MOVF   1A,W
00CE:  MOVWF  00
....................    if (palabra[pal]==0x07) 
00CF:  MOVLW  34
00D0:  ADDWF  31,W
00D1:  MOVWF  04
00D2:  BCF    03.7
00D3:  MOVF   00,W
00D4:  SUBLW  07
00D5:  BTFSS  03.2
00D6:  GOTO   0D9
....................    { 
....................       bit=0; 
00D7:  CLRF   30
....................       hi2=false;       
00D8:  BCF    52.1
....................    } 
....................    pal++; 
00D9:  INCF   31,F
....................  
.................... } 
....................  
00DA:  BCF    0C.5
00DB:  BCF    0A.3
00DC:  GOTO   024
.................... void PWM() 
.................... { 
....................  
....................    output_A(salida); 
*
0106:  BSF    03.5
0107:  CLRF   05
0108:  BCF    03.5
0109:  MOVF   33,W
010A:  MOVWF  05
....................    delay_us(delay); 
010B:  MOVF   29,W
010C:  MOVWF  57
010D:  INCF   57,F
010E:  DECF   57,F
010F:  BTFSC  03.2
0110:  GOTO   115
0111:  MOVLW  FF
0112:  MOVWF  5A
0113:  CALL   0F2
0114:  GOTO   10E
0115:  MOVF   28,W
0116:  MOVWF  5A
0117:  CALL   0F2
....................    output_A(0x00); 
0118:  BSF    03.5
0119:  CLRF   05
011A:  BCF    03.5
011B:  CLRF   05
....................    delay_us(19900-delay); 
011C:  MOVF   28,W
011D:  SUBLW  BC
011E:  MOVWF  57
011F:  MOVLW  4D
0120:  MOVWF  58
0121:  MOVF   29,W
0122:  BTFSS  03.0
0123:  INCFSZ 29,W
0124:  SUBWF  58,F
0125:  MOVF   58,W
0126:  MOVWF  59
0127:  INCF   59,F
0128:  DECF   59,F
0129:  BTFSC  03.2
012A:  GOTO   12F
012B:  MOVLW  FF
012C:  MOVWF  5A
012D:  CALL   0F2
012E:  GOTO   128
012F:  MOVF   57,W
0130:  MOVWF  5A
0131:  CALL   0F2
....................     
.................... } 
0132:  RETURN
....................  
.................... void motor() 
.................... { 
....................  
....................       while(delay<=max) 
....................       {                   
0133:  MOVF   29,W
0134:  SUBWF  2D,W
0135:  BTFSS  03.0
0136:  GOTO   143
0137:  BTFSS  03.2
0138:  GOTO   13D
0139:  MOVF   28,W
013A:  SUBWF  2C,W
013B:  BTFSS  03.0
013C:  GOTO   143
....................          pwm();       
013D:  CALL   106
....................          delay=delay+50; 
013E:  MOVLW  32
013F:  ADDWF  28,F
0140:  BTFSC  03.0
0141:  INCF   29,F
....................       }       
0142:  GOTO   133
....................       delay=max; 
0143:  MOVF   2D,W
0144:  MOVWF  29
0145:  MOVF   2C,W
0146:  MOVWF  28
....................       tiempo=0; 
0147:  CLRF   2F
0148:  CLRF   2E
....................       while(tiempo<=250)//20ms pwm 250<<5seg 
....................       {                   
0149:  MOVF   2F,F
014A:  BTFSS  03.2
014B:  GOTO   155
014C:  MOVF   2E,W
014D:  SUBLW  FA
014E:  BTFSS  03.0
014F:  GOTO   155
....................          pwm();       
0150:  CALL   106
....................          tiempo++; 
0151:  INCF   2E,F
0152:  BTFSC  03.2
0153:  INCF   2F,F
....................       }         
0154:  GOTO   149
....................       while(delay>=min) 
....................       {                     
0155:  MOVF   2B,W
0156:  SUBWF  29,W
0157:  BTFSS  03.0
0158:  GOTO   167
0159:  BTFSS  03.2
015A:  GOTO   15F
015B:  MOVF   2A,W
015C:  SUBWF  28,W
015D:  BTFSS  03.0
015E:  GOTO   167
....................          pwm();                                                
015F:  CALL   106
....................          delay=delay-50; 
0160:  MOVLW  32
0161:  SUBWF  28,F
0162:  MOVLW  00
0163:  BTFSS  03.0
0164:  MOVLW  01
0165:  SUBWF  29,F
....................       }                  
0166:  GOTO   155
....................  
.................... } 
0167:  RETURN
....................  
.................... void main() 
.................... { 
0168:  CLRF   04
0169:  BCF    03.7
016A:  MOVLW  1F
016B:  ANDWF  03,F
016C:  BSF    03.5
016D:  BSF    0E.3
016E:  MOVLW  19
016F:  MOVWF  19
0170:  MOVLW  A6
0171:  MOVWF  18
0172:  MOVLW  90
0173:  BCF    03.5
0174:  MOVWF  18
0175:  CLRF   29
0176:  CLRF   28
0177:  CLRF   30
0178:  CLRF   31
0179:  CLRF   32
017A:  CLRF   33
017B:  BSF    52.0
017C:  BSF    52.1
017D:  BCF    52.2
017E:  MOVLW  07
017F:  MOVWF  1F
0180:  CLRF   54
0181:  CLRF   53
0182:  CLRF   56
0183:  CLRF   55
.................... int16 cont=0, cont2=0; 
....................  
....................    delay_ms(3000); 
0184:  MOVLW  0C
0185:  MOVWF  57
0186:  MOVLW  FA
0187:  MOVWF  58
0188:  CALL   0DD
0189:  DECFSZ 57,F
018A:  GOTO   186
....................    ext_int_edge( H_TO_L );    
018B:  BSF    03.5
018C:  BCF    01.6
....................    enable_interrupts(INT_EXT); 
018D:  BCF    03.5
018E:  BSF    0B.4
....................    enable_interrupts(INT_RDA);    
018F:  BSF    03.5
0190:  BSF    0C.5
....................    enable_interrupts(GLOBAL); 
0191:  MOVLW  C0
0192:  BCF    03.5
0193:  IORWF  0B,F
....................      
....................      
....................      salida=0xCf; 
0194:  MOVLW  CF
0195:  MOVWF  33
....................      //printf("Proyecto para invidentes");           
....................      min=500; 
0196:  MOVLW  01
0197:  MOVWF  2B
0198:  MOVLW  F4
0199:  MOVWF  2A
....................      max=1300; 
019A:  MOVLW  05
019B:  MOVWF  2D
019C:  MOVLW  14
019D:  MOVWF  2C
....................           
....................       delay_ms(3000); 
019E:  MOVLW  0C
019F:  MOVWF  57
01A0:  MOVLW  FA
01A1:  MOVWF  58
01A2:  CALL   0DD
01A3:  DECFSZ 57,F
01A4:  GOTO   1A0
....................       output_bit(Pin_B7,1);       
01A5:  BSF    06.7
01A6:  BSF    03.5
01A7:  BCF    06.7
....................       delay=min;       
01A8:  BCF    03.5
01A9:  MOVF   2B,W
01AA:  MOVWF  29
01AB:  MOVF   2A,W
01AC:  MOVWF  28
....................       motor(); 
01AD:  CALL   133
....................        
....................       max=2000; 
01AE:  MOVLW  07
01AF:  MOVWF  2D
01B0:  MOVLW  D0
01B1:  MOVWF  2C
....................       //2100 máximo, se deja en 2000 para tolerancia      
....................        
....................                   
....................    while(true) 
....................    { 
....................       if (!hi) 
01B2:  BTFSC  52.0
01B3:  GOTO   20D
....................       { 
....................           //printf("%X ",dato);       
....................           if (acento) 
01B4:  BTFSS  52.2
01B5:  GOTO   1E2
....................           { 
....................             for(cont=0;cont<5;cont++) 
01B6:  CLRF   54
01B7:  CLRF   53
01B8:  MOVF   54,F
01B9:  BTFSS  03.2
01BA:  GOTO   1E0
01BB:  MOVF   53,W
01BC:  SUBLW  04
01BD:  BTFSS  03.0
01BE:  GOTO   1E0
....................             { 
....................                if(dato==acentuadas[cont][0]) 
01BF:  BCF    03.0
01C0:  RLF    53,W
01C1:  MOVWF  57
01C2:  RLF    54,W
01C3:  MOVWF  58
01C4:  MOVWF  7A
01C5:  MOVF   57,W
01C6:  CALL   099
01C7:  MOVWF  78
01C8:  SUBWF  32,W
01C9:  BTFSS  03.2
01CA:  GOTO   1DC
....................                { 
....................                   salida=acentuadas[cont][1]; 
01CB:  BCF    03.0
01CC:  RLF    53,W
01CD:  MOVWF  57
01CE:  RLF    54,W
01CF:  MOVWF  58
01D0:  MOVLW  01
01D1:  ADDWF  57,W
01D2:  MOVWF  78
01D3:  MOVF   58,W
01D4:  MOVWF  7A
01D5:  BTFSC  03.0
01D6:  INCF   7A,F
01D7:  MOVF   78,W
01D8:  CALL   099
01D9:  MOVWF  78
01DA:  MOVWF  33
....................                   //printf("%X ",salida);  
....................                   motor();                               
01DB:  CALL   133
....................                } 
....................             } 
01DC:  INCF   53,F
01DD:  BTFSC  03.2
01DE:  INCF   54,F
01DF:  GOTO   1B8
....................             acento=false;             
01E0:  BCF    52.2
....................           } 
....................           else 
01E1:  GOTO   20B
....................           { 
....................           for(cont=0;cont<48;cont++) 
01E2:  CLRF   54
01E3:  CLRF   53
01E4:  MOVF   54,F
01E5:  BTFSS  03.2
01E6:  GOTO   20B
01E7:  MOVF   53,W
01E8:  SUBLW  2F
01E9:  BTFSS  03.0
01EA:  GOTO   20B
....................           { 
....................             if (sinshift[cont][0]==dato) 
01EB:  BCF    03.0
01EC:  RLF    53,W
01ED:  MOVWF  57
01EE:  RLF    54,W
01EF:  MOVWF  58
01F0:  MOVWF  7A
01F1:  MOVF   57,W
01F2:  CALL   035
01F3:  SUBWF  32,W
01F4:  BTFSS  03.2
01F5:  GOTO   207
....................             {                
....................                salida=sinshift[cont][1]; 
01F6:  BCF    03.0
01F7:  RLF    53,W
01F8:  MOVWF  57
01F9:  RLF    54,W
01FA:  MOVWF  58
01FB:  MOVLW  01
01FC:  ADDWF  57,W
01FD:  MOVWF  78
01FE:  MOVF   58,W
01FF:  MOVWF  7A
0200:  BTFSC  03.0
0201:  INCF   7A,F
0202:  MOVF   78,W
0203:  CALL   035
0204:  MOVWF  78
0205:  MOVWF  33
....................                //printf("%X ",salida);  
....................                motor();                               
0206:  CALL   133
....................             }           
....................           }           
0207:  INCF   53,F
0208:  BTFSC  03.2
0209:  INCF   54,F
020A:  GOTO   1E4
....................           } 
....................           dato=0;    
020B:  CLRF   32
....................           hi=true; 
020C:  BSF    52.0
....................       }       
....................        
....................       if (!hi2) 
020D:  BTFSC  52.1
020E:  GOTO   258
....................       { 
....................           for (cont2=0; cont2<pal-1;cont2++) 
020F:  CLRF   56
0210:  CLRF   55
0211:  MOVLW  01
0212:  SUBWF  31,W
0213:  MOVF   56,F
0214:  BTFSS  03.2
0215:  GOTO   256
0216:  SUBWF  55,W
0217:  BTFSC  03.0
0218:  GOTO   256
....................           { 
....................           for(cont=0;cont<48;cont++) 
0219:  CLRF   54
021A:  CLRF   53
021B:  MOVF   54,F
021C:  BTFSS  03.2
021D:  GOTO   252
021E:  MOVF   53,W
021F:  SUBLW  2F
0220:  BTFSS  03.0
0221:  GOTO   252
....................           { 
....................             if (sinshift[cont][0]==palabra[cont2]) 
0222:  BCF    03.0
0223:  RLF    53,W
0224:  MOVWF  57
0225:  RLF    54,W
0226:  MOVWF  58
0227:  MOVWF  7A
0228:  MOVF   57,W
0229:  CALL   035
022A:  MOVWF  57
022B:  MOVLW  34
022C:  ADDWF  55,W
022D:  MOVWF  04
022E:  BCF    03.7
022F:  BTFSC  56.0
0230:  BSF    03.7
0231:  MOVF   00,W
0232:  SUBWF  57,W
0233:  BTFSS  03.2
0234:  GOTO   24E
....................             { 
....................                salida=sinshift[cont][1];                
0235:  BCF    03.0
0236:  RLF    53,W
0237:  MOVWF  57
0238:  RLF    54,W
0239:  MOVWF  58
023A:  MOVLW  01
023B:  ADDWF  57,W
023C:  MOVWF  78
023D:  MOVF   58,W
023E:  MOVWF  7A
023F:  BTFSC  03.0
0240:  INCF   7A,F
0241:  MOVF   78,W
0242:  CALL   035
0243:  MOVWF  78
0244:  MOVWF  33
....................                motor();  
0245:  CALL   133
....................                delay_ms(500); 
0246:  MOVLW  02
0247:  MOVWF  57
0248:  MOVLW  FA
0249:  MOVWF  58
024A:  CALL   0DD
024B:  DECFSZ 57,F
024C:  GOTO   248
....................                break; 
024D:  GOTO   252
....................             }           
....................           } 
024E:  INCF   53,F
024F:  BTFSC  03.2
0250:  INCF   54,F
0251:  GOTO   21B
....................           } 
0252:  INCF   55,F
0253:  BTFSC  03.2
0254:  INCF   56,F
0255:  GOTO   211
....................           pal=0; 
0256:  CLRF   31
....................           hi2=true; 
0257:  BSF    52.1
....................        
....................       }       
....................    } 
0258:  GOTO   1B2
.................... } 
....................  
.................... //5-clock---negro 
.................... //3-GND---cafe 
.................... //1-data-- naramja 
.................... //4-VCC--- rojo 
....................  
.................... /* 
.................... dato[bit]=input(PIN_B4); 
....................    bit++; 
....................     
....................    if (bit>14) 
....................    { 
....................       bit=0; 
....................       for(i=0;i<15;i++) 
....................       { 
....................          printf("%u",dato[i]); 
....................       } 
....................       printf(" "); 
....................       dato[0]=3; 
....................       dato[1]=3; 
....................       dato[2]=3; 
....................       dato[3]=3; 
....................       dato[4]=3; 
....................       dato[5]=3; 
....................       dato[6]=3; 
....................       dato[7]=3; 
....................       dato[8]=3; 
....................       dato[9]=3; 
....................       dato[10]=3; 
....................       dato[11]=3; 
....................       dato[12]=3; 
....................       dato[13]=3; 
....................       dato[14]=3;       
....................    } 
....................     
....................    */ 
0259:  SLEEP

Configuration Fuses:
   Word  1: 3F10   NOWDT PUT INTRC_IO NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
